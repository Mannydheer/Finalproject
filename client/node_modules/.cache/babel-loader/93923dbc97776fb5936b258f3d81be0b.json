{"ast":null,"code":"var _jsxFileName = \"/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js\";\nimport React, { useState, useEffect } from 'react'; //scripts to deploy google maps. \n\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport { requestParks, retrieveParks, retrieveParksError, requestHosts, retrieveHosts, retrieveHostsError, requestEvents, retrieveEvents, retrieveEventsError } from '../actions/parkActions';\nimport { useDispatch, useSelector } from 'react-redux'; //components\n\nimport ParkSidebar from '../ParkSidebar';\nimport styled from 'styled-components';\n\nconst Map = ({\n  coordinates,\n  parkMenu,\n  setParkMenu\n}) => {\n  //pass down coordinates as props.\n  const dispatch = useDispatch(); //stores all nearby parks in store.\n\n  const allParks = useSelector(state => state.parkReducer); //all hosted parks in sotre. \n\n  const hostsInfo = useSelector(state => state.hostReducer); //all events in sotre. \n\n  const allEvents = useSelector(state => state.eventReducer); //selected park that you clicked on. \n\n  const [parkInfo, setParkInfo] = useState(null); //hosted parks that match with nearby parks.\n\n  const [hostedParks, setHostedParks] = useState(null); // ----------------------------Will handle nearby search and get hosted parks from BE-------------------------\n  // const handleParks = () => {\n  //     const handleNearestPlacesAndHosts = async () => {\n  //         dispatch(requestParks())\n  //         let response = await fetch('/nearbySearch', {\n  //             method: \"POST\",\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-type': 'application/json'\n  //             },\n  //             body: JSON.stringify(coordinates)\n  //         })\n  //         let nearbyParks = await response.json();\n  //         if (response.status === 200) {\n  //             dispatch(retrieveParks(nearbyParks.results))\n  //         }\n  //         else {\n  //             dispatch(retrieveParksError())\n  //         }\n  //         //----------------------------------------\n  //         //HOSTS - BETTER WAY TO DO THIS.\n  //         dispatch(requestHosts())\n  //         let hostResponse = await fetch('/getParksWithHosts', {\n  //             method: \"GET\",\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-type': 'application/json'\n  //             },\n  //         })\n  //         let allHosts = await hostResponse.json();\n  //         if (hostResponse.status === 200) {\n  //             dispatch(retrieveHosts(allHosts.hosts))\n  //         } else {\n  //             dispatch(retrieveHostsError())\n  //         }\n  //         //----------------------------------------\n  //         dispatch(requestEvents())\n  //         let eventResponse = await fetch('/getEvents', {\n  //             method: \"GET\",\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-type': 'application/json'\n  //             },\n  //         })\n  //         let allEvents = await eventResponse.json();\n  //         if (eventResponse.status === 200) {\n  //             dispatch(retrieveEvents(allEvents.events))\n  //         } else {\n  //             dispatch(retrieveEventsError())\n  //         }\n  //     }\n  //     handleNearestPlacesAndHosts();\n  // }\n  //On re-render of componenet, will check if the nearby searched parks match with parks that are currently being hosted. \n\n  useEffect(() => {\n    if (hostsInfo.hosts !== null) {\n      let matchedParks = []; //getting it from the store hosts parks.\n      //double forEach to compare - More efficient way?\n\n      Object.values(hostsInfo.hosts).forEach(element => {\n        allParks.parks.forEach(park => {\n          if (park.id === element.parkId) {\n            matchedParks.push(park);\n          } else return;\n        });\n      });\n      setHostedParks(matchedParks);\n    }\n  }, [hostsInfo, allParks]); //control slide in modal for when selecting a park.\n\n  const handleParkSelect = park => {\n    //load state with the park information clicked on.\n    setParkInfo(park); //park menu will make modal appear. \n\n    setParkMenu(!parkMenu);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ParkButton, {\n    onClick: handleParks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"FIND PARKS\"), /*#__PURE__*/React.createElement(Sidebar, {\n    style: parkMenu ? {\n      transform: \"translateX(0px)\"\n    } : {\n      transform: \"translateX(-400px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, parkMenu && /*#__PURE__*/React.createElement(ParkSidebar, {\n    parkInfo: parkInfo,\n    parkMenu: parkMenu,\n    setParkMenu: setParkMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 30\n    }\n  })), /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 15,\n    center: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n    //Compare hosted parks with nearby parks. \n    //if being hosted, render PERSON MARKER(hosts).\n    if (hostedParks !== null && hostsInfo.hosts !== null && allEvents.events !== null && allEvents.events[park.id]) {\n      return /*#__PURE__*/React.createElement(Marker, {\n        icon: {\n          url: '/person.png'\n        },\n        position: park.geometry.location,\n        onClick: () => handleParkSelect(park),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 29\n        }\n      });\n    } //else render RED MARKER(no hosts.)\n    else {\n        return /*#__PURE__*/React.createElement(Marker, {\n          position: park.geometry.location,\n          onClick: () => handleParkSelect(park),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }\n        });\n      }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: coordinates,\n    icon: {\n      url: '/home.png'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  })));\n}; //Must wrap within these scrip - read documentaion.\n\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;\nconst Sidebar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\n\n   position: fixed; \n    left: 0; \n    width:400px;\n    height: 70vh; \n    transition-duration: .7s;\n    top: 30vh; \n\n    background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n    \n    `;\nconst ParkButton = styled.button`\n    position: absolute;\n    top: 30vh;\n    right: 47vw;\n    border-radius: 25px;\n    padding: 5px;\n    font-size:1.2rem;\n    outline: none;\n    transition: ease all 1s;\n\n\n    &:hover {\n        cursor: pointer;\n        background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n       \n\n    }\n\n    `;","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js"],"names":["React","useState","useEffect","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","requestParks","retrieveParks","retrieveParksError","requestHosts","retrieveHosts","retrieveHostsError","requestEvents","retrieveEvents","retrieveEventsError","useDispatch","useSelector","ParkSidebar","styled","Map","coordinates","parkMenu","setParkMenu","dispatch","allParks","state","parkReducer","hostsInfo","hostReducer","allEvents","eventReducer","parkInfo","setParkInfo","hostedParks","setHostedParks","hosts","matchedParks","Object","values","forEach","element","parks","park","id","parkId","push","handleParkSelect","handleParks","transform","lat","lng","status","map","events","url","geometry","location","WrappedMap","Sidebar","div","ParkButton","button"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n//scripts to deploy google maps. \nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport {\n    requestParks, retrieveParks, retrieveParksError,\n    requestHosts, retrieveHosts, retrieveHostsError,\n    requestEvents, retrieveEvents, retrieveEventsError\n} from '../actions/parkActions';\n\nimport { useDispatch, useSelector } from 'react-redux';\n//components\nimport ParkSidebar from '../ParkSidebar';\n\n\nimport styled from 'styled-components';\n\n\n\nconst Map = ({ coordinates, parkMenu, setParkMenu }) => {\n    //pass down coordinates as props.\n\n    const dispatch = useDispatch();\n    //stores all nearby parks in store.\n    const allParks = useSelector(state => state.parkReducer)\n    //all hosted parks in sotre. \n    const hostsInfo = useSelector(state => state.hostReducer)\n    //all events in sotre. \n    const allEvents = useSelector(state => state.eventReducer)\n    //selected park that you clicked on. \n    const [parkInfo, setParkInfo] = useState(null)\n    //hosted parks that match with nearby parks.\n    const [hostedParks, setHostedParks] = useState(null)\n\n\n    // ----------------------------Will handle nearby search and get hosted parks from BE-------------------------\n    // const handleParks = () => {\n    //     const handleNearestPlacesAndHosts = async () => {\n    //         dispatch(requestParks())\n    //         let response = await fetch('/nearbySearch', {\n    //             method: \"POST\",\n    //             headers: {\n    //                 'Accept': 'application/json',\n    //                 'Content-type': 'application/json'\n    //             },\n    //             body: JSON.stringify(coordinates)\n    //         })\n    //         let nearbyParks = await response.json();\n    //         if (response.status === 200) {\n    //             dispatch(retrieveParks(nearbyParks.results))\n    //         }\n    //         else {\n    //             dispatch(retrieveParksError())\n    //         }\n    //         //----------------------------------------\n    //         //HOSTS - BETTER WAY TO DO THIS.\n    //         dispatch(requestHosts())\n    //         let hostResponse = await fetch('/getParksWithHosts', {\n    //             method: \"GET\",\n    //             headers: {\n    //                 'Accept': 'application/json',\n    //                 'Content-type': 'application/json'\n    //             },\n    //         })\n    //         let allHosts = await hostResponse.json();\n    //         if (hostResponse.status === 200) {\n    //             dispatch(retrieveHosts(allHosts.hosts))\n\n    //         } else {\n    //             dispatch(retrieveHostsError())\n\n    //         }\n    //         //----------------------------------------\n    //         dispatch(requestEvents())\n    //         let eventResponse = await fetch('/getEvents', {\n    //             method: \"GET\",\n    //             headers: {\n    //                 'Accept': 'application/json',\n    //                 'Content-type': 'application/json'\n    //             },\n    //         })\n    //         let allEvents = await eventResponse.json();\n    //         if (eventResponse.status === 200) {\n    //             dispatch(retrieveEvents(allEvents.events))\n\n    //         } else {\n    //             dispatch(retrieveEventsError())\n    //         }\n\n\n    //     }\n    //     handleNearestPlacesAndHosts();\n    // }\n\n    //On re-render of componenet, will check if the nearby searched parks match with parks that are currently being hosted. \n    useEffect(() => {\n        if (hostsInfo.hosts !== null) {\n\n            let matchedParks = [];\n            //getting it from the store hosts parks.\n            //double forEach to compare - More efficient way?\n            Object.values(hostsInfo.hosts).forEach(element => {\n                allParks.parks.forEach(park => {\n                    if (park.id === element.parkId) {\n                        matchedParks.push(park)\n                    }\n                    else return;\n                });\n            });\n            setHostedParks(matchedParks)\n        }\n    }, [hostsInfo, allParks])\n\n    //control slide in modal for when selecting a park.\n    const handleParkSelect = (park) => {\n        //load state with the park information clicked on.\n        setParkInfo(park)\n        //park menu will make modal appear. \n        setParkMenu(!parkMenu)\n    }\n\n    return (\n        <>\n            <ParkButton onClick={handleParks}>FIND PARKS</ParkButton>\n            <Sidebar style={(parkMenu) ? { transform: \"translateX(0px)\" } : {\n                transform: \"translateX(-400px)\"\n            }}>\n                {/* park info needs to be loaded.  */}\n                {parkMenu && <ParkSidebar parkInfo={parkInfo} parkMenu={parkMenu} setParkMenu={setParkMenu}></ParkSidebar>}\n            </Sidebar>\n            {/* THE GOOGLE MAP. */}\n            <GoogleMap defaultZoom={15}\n                center={{ lat: coordinates.lat, lng: coordinates.lng }}>\n\n                {/* RENDER ALL PARKS NEARBY */}\n                {allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n\n                    //Compare hosted parks with nearby parks. \n                    //if being hosted, render PERSON MARKER(hosts).\n                    if (hostedParks !== null &&\n                        hostsInfo.hosts !== null &&\n                        allEvents.events !== null &&\n                        allEvents.events[park.id]) {\n                        return (\n                            <Marker\n                                icon={{ url: '/person.png' }}\n                                position={park.geometry.location}\n                                onClick={() => handleParkSelect(park)}>\n                            </Marker>\n                        )\n                    }\n                    //else render RED MARKER(no hosts.)\n\n                    else {\n                        return (\n                            <Marker\n                                position={park.geometry.location}\n                                onClick={() => handleParkSelect(park)} />\n                        )\n\n                    }\n\n                })}\n                {/* RENDER ALL HOSTED PARKS. */}\n                {/* {hostsInfo.hosts !== null && hostedParks !== null && hostedParks.map(park => {\n                    return (\n                        <Marker\n                            icon={{ url: '/person.png' }}\n                            position={park.geometry.location}\n                            onClick={() => handleParkSelect(park)} />\n                    )\n                })} */}\n\n                {/* CURRENT POSITION - HOME. */}\n                <Marker position={coordinates}\n                    icon={{ url: '/home.png' }}\n\n                ></Marker>\n\n                {/* TIPPY/INFO ON CLICK OF A MARKER.  */}\n                {/* {parkInfo !== null &&\n                    //control the tippy for each map point.\n                    <InfoWindow\n                        position={{\n                            lat: parkInfo.geometry.location.lat,\n                            lng: parkInfo.geometry.location.lng\n                        }}\n                        onCloseClick={() => setParkInfo(null)}>\n                        <div>\n                            <div>park details</div>\n                            <div>{parkInfo.name}</div>\n                        </div>\n                    </InfoWindow>} */}\n            </GoogleMap>\n        </>\n\n    )\n\n}\n//Must wrap within these scrip - read documentaion.\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\n\nexport default WrappedMap;\n\nconst Sidebar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\n\n   position: fixed; \n    left: 0; \n    width:400px;\n    height: 70vh; \n    transition-duration: .7s;\n    top: 30vh; \n\n    background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n    \n    `\n\nconst ParkButton = styled.button`\n    position: absolute;\n    top: 30vh;\n    right: 47vw;\n    border-radius: 25px;\n    padding: 5px;\n    font-size:1.2rem;\n    outline: none;\n    transition: ease all 1s;\n\n\n    &:hover {\n        cursor: pointer;\n        background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n       \n\n    }\n\n    `"]},"metadata":{},"sourceType":"module"}