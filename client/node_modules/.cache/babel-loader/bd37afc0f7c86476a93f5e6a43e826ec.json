{"ast":null,"code":"var _jsxFileName = \"/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/GoogleAddress/GoogleAddress.js\";\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geoCodeByAddress } from 'react-places-autocomplete';\nimport Geocode from \"react-geocode\";\nimport styled from 'styled-components';\n\nconst GoogleAddress = ({\n  setCoordinates\n}) => {\n  const [address, setAddress] = useState('');\n\n  const handleSelect = async value => {\n    //get longitude and latitude.\n    Geocode.setApiKey(\"AIzaSyAt-D4AMalUpyQjUe3laQYyjjNgy_hcCOc\"); // set response language. Defaults to english.\n\n    Geocode.setLanguage(\"en\"); // set response region. Its optional.\n    // A Geocoding request with region=es (Spain) will return the Spanish city.\n\n    Geocode.setRegion(\"ca\"); // Enable or disable logs. Its optional.\n\n    Geocode.enableDebug(); // Get latidude & longitude from address.\n\n    Geocode.fromAddress(value).then(response => {\n      const {\n        lat,\n        lng\n      } = response.results[0].geometry.location;\n      console.log(lat, lng);\n      setCoordinates({\n        lat: lat,\n        lng: lng\n      });\n    }, error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: setAddress,\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(StyledInput, Object.assign({}, getInputProps({\n    placeholder: \"type address\"\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 80\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 40\n    }\n  }, \"...loading\") : null, suggestions.map(suggestion => {\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 40\n      }\n    }), \" \", suggestion.description);\n  })))));\n};\n\nexport default GoogleAddress;\nconst StyledInput = styled.input`\nwidth: 50%;\nheight: 30px;\nfont-size: 1.5rem;\n\n`;\nconst Wrapper = styled.div`\ndisplay: flex;\n`;","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/GoogleAddress/GoogleAddress.js"],"names":["React","useState","PlacesAutocomplete","geoCodeByAddress","Geocode","styled","GoogleAddress","setCoordinates","address","setAddress","handleSelect","value","setApiKey","setLanguage","setRegion","enableDebug","fromAddress","then","response","lat","lng","results","geometry","location","console","log","error","getInputProps","suggestions","getSuggestionItemProps","loading","display","justifyContent","placeholder","map","suggestion","description","StyledInput","input","Wrapper","div"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IACIC,gBADJ,QAEO,2BAFP;AAGA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAIA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAE1C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;;AAGA,QAAMS,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAElC;AACAP,IAAAA,OAAO,CAACQ,SAAR,CAAkB,yCAAlB,EAHkC,CAIlC;;AACAR,IAAAA,OAAO,CAACS,WAAR,CAAoB,IAApB,EALkC,CAMlC;AACA;;AACAT,IAAAA,OAAO,CAACU,SAAR,CAAkB,IAAlB,EARkC,CASlC;;AACAV,IAAAA,OAAO,CAACW,WAAR,GAVkC,CAWlC;;AACAX,IAAAA,OAAO,CAACY,WAAR,CAAoBL,KAApB,EAA2BM,IAA3B,CACIC,QAAQ,IAAI;AACR,YAAM;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAeF,QAAQ,CAACG,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAAlD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EAAiBC,GAAjB;AACAb,MAAAA,cAAc,CAAC;AACXY,QAAAA,GAAG,EAAEA,GADM;AAEXC,QAAAA,GAAG,EAAEA;AAFM,OAAD,CAAd;AAIH,KARL,EASIM,KAAK,IAAI;AACLF,MAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACH,KAXL;AAaH,GAzBD;;AA2BA,sBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,kBAAD;AAAoB,IAAA,KAAK,EAAElB,OAA3B;AAAoC,IAAA,QAAQ,EAAEC,UAA9C;AAA0D,IAAA,QAAQ,EAAEC,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEK,CAAC;AAAEiB,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,kBACG;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA2D,oBAAC,WAAD,oBAAiBL,aAAa,CAAC;AAAEM,IAAAA,WAAW,EAAE;AAAf,GAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3D,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,GAA2B,IADvC,EAGKF,WAAW,CAACM,GAAZ,CAAiBC,UAAD,IAAgB;AAC7B,wBAAO,6CAASN,sBAAsB,CAACM,UAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA+CA,UAAU,CAACC,WAA1D,CAAP;AACH,GAFA,CAHL,CADJ,CAHR,CADJ,CADJ;AAkBH,CAlDD;;AAoDA,eAAe9B,aAAf;AAEA,MAAM+B,WAAW,GAAGhC,MAAM,CAACiC,KAAM;;;;;CAAjC;AAMA,MAAMC,OAAO,GAAGlC,MAAM,CAACmC,GAAI;;CAA3B","sourcesContent":["import React, { useState } from 'react';\nimport PlacesAutocomplete, {\n    geoCodeByAddress,\n} from 'react-places-autocomplete';\nimport Geocode from \"react-geocode\";\nimport styled from 'styled-components';\n\n\n\nconst GoogleAddress = ({ setCoordinates }) => {\n\n    const [address, setAddress] = useState('')\n\n\n    const handleSelect = async (value) => {\n\n        //get longitude and latitude.\n        Geocode.setApiKey(\"AIzaSyAt-D4AMalUpyQjUe3laQYyjjNgy_hcCOc\");\n        // set response language. Defaults to english.\n        Geocode.setLanguage(\"en\");\n        // set response region. Its optional.\n        // A Geocoding request with region=es (Spain) will return the Spanish city.\n        Geocode.setRegion(\"ca\");\n        // Enable or disable logs. Its optional.\n        Geocode.enableDebug();\n        // Get latidude & longitude from address.\n        Geocode.fromAddress(value).then(\n            response => {\n                const { lat, lng } = response.results[0].geometry.location;\n                console.log(lat, lng);\n                setCoordinates({\n                    lat: lat,\n                    lng: lng\n                })\n            },\n            error => {\n                console.error(error);\n            }\n        );\n    }\n\n    return (\n        <Wrapper>\n            <PlacesAutocomplete value={address} onChange={setAddress} onSelect={handleSelect}>\n                {/*wants render prop function as child.  */}\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) =>\n                    <div style={{ display: 'flex', justifyContent: 'center' }}><StyledInput {...getInputProps({ placeholder: \"type address\" })}></StyledInput>\n                        <div>\n                            {loading ? <div>...loading</div> : null}\n                            {/* add styling. */}\n                            {suggestions.map((suggestion) => {\n                                return <div {...getSuggestionItemProps(suggestion)}> {suggestion.description}</div>\n                            })}\n                        </div>\n                    </div>}\n            </PlacesAutocomplete>\n        </Wrapper>\n    )\n\n}\n\nexport default GoogleAddress;\n\nconst StyledInput = styled.input`\nwidth: 50%;\nheight: 30px;\nfont-size: 1.5rem;\n\n`\nconst Wrapper = styled.div`\ndisplay: flex;\n`"]},"metadata":{},"sourceType":"module"}