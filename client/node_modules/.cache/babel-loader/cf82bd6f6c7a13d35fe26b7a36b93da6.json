{"ast":null,"code":"var _jsxFileName = \"/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js\";\nimport React, { useState, useEffect } from 'react'; //scripts to deploy google maps. \n\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport { requestParks, retrieveParks, retrieveParksError, requestHosts, retrieveHosts, retrieveHostsError, requestEvents, retrieveEvents, retrieveEventsError } from '../actions/parkActions';\nimport { useDispatch, useSelector } from 'react-redux'; //components\n\nimport ParkSidebar from '../ParkSidebar';\nimport styled from 'styled-components';\n\nconst Map = ({\n  coordinates,\n  parkMenu,\n  setParkMenu\n}) => {\n  //pass down coordinates as props.\n  const dispatch = useDispatch(); //stores all nearby parks in store.\n\n  const allParks = useSelector(state => state.parkReducer); //all hosted parks in sotre. \n\n  const hostsInfo = useSelector(state => state.hostReducer); //all events in sotre. \n\n  const events = useSelector(state => state.eventReducer); //selected park that you clicked on. \n\n  const [parkInfo, setParkInfo] = useState(null); //hosted parks that match with nearby parks.\n\n  const [hostedParks, setHostedParks] = useState(null); // ----------------------------Will handle nearby search and get hosted parks from BE-------------------------\n\n  const handleParks = () => {\n    const handleNearestPlacesAndHosts = async () => {\n      dispatch(requestParks());\n      let response = await fetch('/nearbySearch', {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(coordinates)\n      });\n      let nearbyParks = await response.json();\n\n      if (response.status === 200) {\n        dispatch(retrieveParks(nearbyParks.results));\n      } else {\n        dispatch(retrieveParksError());\n      } //----------------------------------------\n      //HOSTS - BETTER WAY TO DO THIS.\n\n\n      dispatch(requestHosts());\n      let hostResponse = await fetch('/getParksWithHosts', {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        }\n      });\n      let allHosts = await hostResponse.json();\n\n      if (hostResponse.status === 200) {\n        dispatch(retrieveHosts(allHosts.hosts));\n      } else {\n        dispatch(retrieveHostsError());\n      } //----------------------------------------\n\n\n      dispatch(requestEvents());\n      let eventResponse = await fetch('/getEvents', {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        }\n      });\n      let allEvents = await eventResponse.json();\n\n      if (eventResponse.status === 200) {\n        dispatch(retrieveEvents(allEvents.events));\n      } else {\n        dispatch(retrieveEventsError());\n      }\n    };\n\n    handleNearestPlacesAndHosts();\n  }; //On re-render of componenet, will check if the nearby searched parks match with parks that are currently being hosted. \n\n\n  useEffect(() => {\n    if (hostsInfo.hosts !== null) {\n      let matchedParks = []; //getting it from the store hosts parks.\n      //double forEach to compare - More efficient way?\n\n      Object.values(hostsInfo.hosts).forEach(element => {\n        allParks.parks.forEach(park => {\n          if (park.id === element.parkId) {\n            matchedParks.push(park);\n          } else return;\n        });\n      });\n      setHostedParks(matchedParks);\n    }\n  }, [hostsInfo, allParks]); //control slide in modal for when selecting a park.\n\n  const handleParkSelect = park => {\n    //load state with the park information clicked on.\n    setParkInfo(park); //park menu will make modal appear. \n\n    setParkMenu(!parkMenu);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ParkButton, {\n    onClick: handleParks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"FIND PARKS\"), /*#__PURE__*/React.createElement(Sidebar, {\n    style: parkMenu ? {\n      transform: \"translateX(0px)\"\n    } : {\n      transform: \"translateX(-400px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, parkMenu && /*#__PURE__*/React.createElement(ParkSidebar, {\n    parkInfo: parkInfo,\n    parkMenu: parkMenu,\n    setParkMenu: setParkMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 30\n    }\n  })), /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 15,\n    center: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n    //Compare hosted parks with nearby parks. \n    //if being hosted, render PERSON MARKER(hosts).\n    if (hostedParks !== null && hostsInfo.hosts !== null) {\n      events.forEach(event => {\n        if (park.id === event.parkId) {\n          return /*#__PURE__*/React.createElement(Marker, {\n            icon: {\n              url: '/person.png'\n            },\n            position: park.geometry.location,\n            onClick: () => handleParkSelect(park),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 37\n            }\n          });\n        } else return;\n      });\n    } //else render RED MARKER(no hosts.)\n    else {\n        return /*#__PURE__*/React.createElement(Marker, {\n          position: park.geometry.location,\n          onClick: () => handleParkSelect(park),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }\n        });\n      }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: coordinates,\n    icon: {\n      url: '/home.png'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  })));\n}; //Must wrap within these scrip - read documentaion.\n\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;\nconst Sidebar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\n\n   position: fixed; \n    left: 0; \n    width:400px;\n    height: 70vh; \n    transition-duration: .7s;\n    top: 30vh; \n\n    background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n    \n    `;\nconst ParkButton = styled.button`\n    position: absolute;\n    top: 30vh;\n    right: 47vw;\n    border-radius: 25px;\n    padding: 5px;\n    font-size:1.2rem;\n    outline: none;\n    transition: ease all 1s;\n\n\n    &:hover {\n        cursor: pointer;\n        background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n       \n\n    }\n\n    `;","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js"],"names":["React","useState","useEffect","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","requestParks","retrieveParks","retrieveParksError","requestHosts","retrieveHosts","retrieveHostsError","requestEvents","retrieveEvents","retrieveEventsError","useDispatch","useSelector","ParkSidebar","styled","Map","coordinates","parkMenu","setParkMenu","dispatch","allParks","state","parkReducer","hostsInfo","hostReducer","events","eventReducer","parkInfo","setParkInfo","hostedParks","setHostedParks","handleParks","handleNearestPlacesAndHosts","response","fetch","method","headers","body","JSON","stringify","nearbyParks","json","status","results","hostResponse","allHosts","hosts","eventResponse","allEvents","matchedParks","Object","values","forEach","element","parks","park","id","parkId","push","handleParkSelect","transform","lat","lng","map","event","url","geometry","location","WrappedMap","Sidebar","div","ParkButton","button"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n//scripts to deploy google maps. \nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport {\n    requestParks, retrieveParks, retrieveParksError,\n    requestHosts, retrieveHosts, retrieveHostsError,\n    requestEvents, retrieveEvents, retrieveEventsError\n} from '../actions/parkActions';\n\nimport { useDispatch, useSelector } from 'react-redux';\n//components\nimport ParkSidebar from '../ParkSidebar';\n\n\nimport styled from 'styled-components';\n\n\n\nconst Map = ({ coordinates, parkMenu, setParkMenu }) => {\n    //pass down coordinates as props.\n\n    const dispatch = useDispatch();\n    //stores all nearby parks in store.\n    const allParks = useSelector(state => state.parkReducer)\n    //all hosted parks in sotre. \n    const hostsInfo = useSelector(state => state.hostReducer)\n    //all events in sotre. \n    const events = useSelector(state => state.eventReducer)\n    //selected park that you clicked on. \n    const [parkInfo, setParkInfo] = useState(null)\n    //hosted parks that match with nearby parks.\n    const [hostedParks, setHostedParks] = useState(null)\n\n\n    // ----------------------------Will handle nearby search and get hosted parks from BE-------------------------\n    const handleParks = () => {\n        const handleNearestPlacesAndHosts = async () => {\n            dispatch(requestParks())\n            let response = await fetch('/nearbySearch', {\n                method: \"POST\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify(coordinates)\n            })\n            let nearbyParks = await response.json();\n            if (response.status === 200) {\n                dispatch(retrieveParks(nearbyParks.results))\n            }\n            else {\n                dispatch(retrieveParksError())\n            }\n            //----------------------------------------\n            //HOSTS - BETTER WAY TO DO THIS.\n            dispatch(requestHosts())\n            let hostResponse = await fetch('/getParksWithHosts', {\n                method: \"GET\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-type': 'application/json'\n                },\n            })\n            let allHosts = await hostResponse.json();\n            if (hostResponse.status === 200) {\n                dispatch(retrieveHosts(allHosts.hosts))\n\n            } else {\n                dispatch(retrieveHostsError())\n\n            }\n            //----------------------------------------\n            dispatch(requestEvents())\n            let eventResponse = await fetch('/getEvents', {\n                method: \"GET\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-type': 'application/json'\n                },\n            })\n            let allEvents = await eventResponse.json();\n            if (eventResponse.status === 200) {\n                dispatch(retrieveEvents(allEvents.events))\n\n            } else {\n                dispatch(retrieveEventsError())\n            }\n\n\n        }\n        handleNearestPlacesAndHosts();\n    }\n\n    //On re-render of componenet, will check if the nearby searched parks match with parks that are currently being hosted. \n    useEffect(() => {\n        if (hostsInfo.hosts !== null) {\n\n            let matchedParks = [];\n            //getting it from the store hosts parks.\n            //double forEach to compare - More efficient way?\n            Object.values(hostsInfo.hosts).forEach(element => {\n                allParks.parks.forEach(park => {\n                    if (park.id === element.parkId) {\n                        matchedParks.push(park)\n                    }\n                    else return;\n                });\n            });\n            setHostedParks(matchedParks)\n        }\n    }, [hostsInfo, allParks])\n\n    //control slide in modal for when selecting a park.\n    const handleParkSelect = (park) => {\n        //load state with the park information clicked on.\n        setParkInfo(park)\n        //park menu will make modal appear. \n        setParkMenu(!parkMenu)\n    }\n\n    return (\n        <>\n            <ParkButton onClick={handleParks}>FIND PARKS</ParkButton>\n            <Sidebar style={(parkMenu) ? { transform: \"translateX(0px)\" } : {\n                transform: \"translateX(-400px)\"\n            }}>\n                {/* park info needs to be loaded.  */}\n                {parkMenu && <ParkSidebar parkInfo={parkInfo} parkMenu={parkMenu} setParkMenu={setParkMenu}></ParkSidebar>}\n            </Sidebar>\n            {/* THE GOOGLE MAP. */}\n            <GoogleMap defaultZoom={15}\n                center={{ lat: coordinates.lat, lng: coordinates.lng }}>\n\n                {/* RENDER ALL PARKS NEARBY */}\n                {allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n\n                    //Compare hosted parks with nearby parks. \n                    //if being hosted, render PERSON MARKER(hosts).\n                    if (hostedParks !== null && hostsInfo.hosts !== null) {\n\n                        events.forEach(event => {\n                            if (park.id === event.parkId) {\n                                return (\n                                    <Marker\n                                        icon={{ url: '/person.png' }}\n                                        position={park.geometry.location}\n                                        onClick={() => handleParkSelect(park)}>\n                                    </Marker>\n                                )\n                            } else return;\n                        })\n                    }\n                    //else render RED MARKER(no hosts.)\n\n                    else {\n                        return (\n                            <Marker\n                                position={park.geometry.location}\n                                onClick={() => handleParkSelect(park)} />\n                        )\n\n                    }\n\n                })}\n                {/* RENDER ALL HOSTED PARKS. */}\n                {/* {hostsInfo.hosts !== null && hostedParks !== null && hostedParks.map(park => {\n                    return (\n                        <Marker\n                            icon={{ url: '/person.png' }}\n                            position={park.geometry.location}\n                            onClick={() => handleParkSelect(park)} />\n                    )\n                })} */}\n\n                {/* CURRENT POSITION - HOME. */}\n                <Marker position={coordinates}\n                    icon={{ url: '/home.png' }}\n\n                ></Marker>\n\n                {/* TIPPY/INFO ON CLICK OF A MARKER.  */}\n                {/* {parkInfo !== null &&\n                    //control the tippy for each map point.\n                    <InfoWindow\n                        position={{\n                            lat: parkInfo.geometry.location.lat,\n                            lng: parkInfo.geometry.location.lng\n                        }}\n                        onCloseClick={() => setParkInfo(null)}>\n                        <div>\n                            <div>park details</div>\n                            <div>{parkInfo.name}</div>\n                        </div>\n                    </InfoWindow>} */}\n            </GoogleMap>\n        </>\n\n    )\n\n}\n//Must wrap within these scrip - read documentaion.\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\n\nexport default WrappedMap;\n\nconst Sidebar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\n\n   position: fixed; \n    left: 0; \n    width:400px;\n    height: 70vh; \n    transition-duration: .7s;\n    top: 30vh; \n\n    background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n    \n    `\n\nconst ParkButton = styled.button`\n    position: absolute;\n    top: 30vh;\n    right: 47vw;\n    border-radius: 25px;\n    padding: 5px;\n    font-size:1.2rem;\n    outline: none;\n    transition: ease all 1s;\n\n\n    &:hover {\n        cursor: pointer;\n        background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n       \n\n    }\n\n    `"]},"metadata":{},"sourceType":"module"}