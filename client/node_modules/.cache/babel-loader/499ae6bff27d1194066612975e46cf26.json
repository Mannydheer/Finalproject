{"ast":null,"code":"var _jsxFileName = \"/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js\";\nimport React, { useEffect, useRef } from 'react'; //scripts to deploy google maps. \n\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from 'react-google-maps';\nconst google = window.google;\n\nconst Map = ({\n  coordinates\n}) => {\n  //pass down coordinates as props.\n  const map = React.useRef();\n  useEffect(() => {\n    //\n    const service = new google.maps.places.PlacesService(map);\n    service.nearbySearch({\n      location: coordinates,\n      radius: 100,\n      type: ['park']\n    }, serviceCallback);\n\n    const serviceCallback = (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (let i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n        }\n      }\n    };\n\n    console.log(serviceCallback);\n  }, []);\n  return /*#__PURE__*/React.createElement(GoogleMap, {\n    ref: map,\n    defaultZoom: 15,\n    center: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: coordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }));\n}; //must wrap.\n\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js"],"names":["React","useEffect","useRef","GoogleMap","withScriptjs","withGoogleMap","Marker","google","window","Map","coordinates","map","service","maps","places","PlacesService","nearbySearch","location","radius","type","serviceCallback","results","status","PlacesServiceStatus","OK","i","length","createMarker","console","log","lat","lng","WrappedMap"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC,C,CACA;;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,aAAlC,EAAiDC,MAAjD,QAA+D,mBAA/D;AAEA,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAtB;;AAEA,MAAME,GAAG,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAC7B;AAEA,QAAMC,GAAG,GAAGX,KAAK,CAACE,MAAN,EAAZ;AAKAD,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA,UAAMW,OAAO,GAAG,IAAIL,MAAM,CAACM,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCJ,GAArC,CAAhB;AAEAC,IAAAA,OAAO,CAACI,YAAR,CAAqB;AACjBC,MAAAA,QAAQ,EAAEP,WADO;AAEjBQ,MAAAA,MAAM,EAAE,GAFS;AAGjBC,MAAAA,IAAI,EAAE,CAAC,MAAD;AAHW,KAArB,EAIGC,eAJH;;AAKA,UAAMA,eAAe,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACzC,UAAIA,MAAM,KAAKf,MAAM,CAACM,IAAP,CAAYC,MAAZ,CAAmBS,mBAAnB,CAAuCC,EAAtD,EAA0D;AACtD,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCE,UAAAA,YAAY,CAACN,OAAO,CAACI,CAAD,CAAR,CAAZ;AAEH;AACJ;AACJ,KAPD;;AASAG,IAAAA,OAAO,CAACC,GAAR,CAAYT,eAAZ;AAOH,GA1BQ,EA0BN,EA1BM,CAAT;AAsCA,sBAEI,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAET,GAAhB;AAAqB,IAAA,WAAW,EAAE,EAAlC;AACI,IAAA,MAAM,EAAE;AAAEmB,MAAAA,GAAG,EAAEpB,WAAW,CAACoB,GAAnB;AAAwBC,MAAAA,GAAG,EAAErB,WAAW,CAACqB;AAAzC,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAErB,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ;AAQH,CAtDD,C,CAuDA;;;AACA,MAAMsB,UAAU,GAAG5B,YAAY,CAACC,aAAa,CAACI,GAAD,CAAd,CAA/B;AAGA,eAAeuB,UAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\n//scripts to deploy google maps. \nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from 'react-google-maps';\n\nconst google = window.google;\n\nconst Map = ({ coordinates }) => {\n    //pass down coordinates as props.\n\n    const map = React.useRef()\n\n\n\n\n    useEffect(() => {\n\n        //\n        const service = new google.maps.places.PlacesService(map);\n\n        service.nearbySearch({\n            location: coordinates,\n            radius: 100,\n            type: ['park']\n        }, serviceCallback);\n        const serviceCallback = (results, status) => {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n                for (let i = 0; i < results.length; i++) {\n                    createMarker(results[i]);\n\n                }\n            }\n        }\n\n        console.log(serviceCallback)\n\n\n\n\n\n\n    }, [])\n\n\n\n\n\n\n\n\n\n\n\n    return (\n\n        <GoogleMap ref={map} defaultZoom={15}\n            center={{ lat: coordinates.lat, lng: coordinates.lng }}>\n            <Marker position={coordinates}></Marker>\n        </GoogleMap>\n    )\n\n}\n//must wrap.\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\n\nexport default WrappedMap;"]},"metadata":{},"sourceType":"module"}