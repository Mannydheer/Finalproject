{"ast":null,"code":"const intitialState = {\n  status: 'idle',\n  isLoading: false,\n  events: null\n};\nexport default function eventReducer(state = intitialState, action) {\n  switch (action.type) {\n    //singup or login success\n    case \"REQUEST_EVENTS\":\n      {\n        console.log(action);\n        return { ...state,\n          status: 'requesting events...',\n          isLoading: true\n        };\n      }\n\n    case \"RETRIEVE_EVENTS\":\n      {\n        let bookings = {};\n        action.data.forEach(event => {\n          let eventArray = [];\n\n          if (bookings[event.parkId]) {\n            eventArray = bookings[event.parkId];\n          }\n\n          eventArray.push(event);\n          bookings = { ...bookings,\n            [event.parkId]: eventArray\n          };\n        });\n        return { ...state,\n          status: 'retrieved events.',\n          isLoading: false,\n          events: bookings\n        };\n      }\n\n    case \"RETRIEVE_EVENTS_ERROR\":\n      {\n        console.log(action);\n        return { ...state,\n          status: 'Error occured retrieving events.',\n          isLoading: false,\n          events: null\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/reducers/event-reducer.js"],"names":["intitialState","status","isLoading","events","eventReducer","state","action","type","console","log","bookings","data","forEach","event","eventArray","parkId","push"],"mappings":"AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,MADU;AAElBC,EAAAA,SAAS,EAAE,KAFO;AAGlBC,EAAAA,MAAM,EAAE;AAHU,CAAtB;AAQA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAGL,aAA9B,EAA6CM,MAA7C,EAAqD;AAChE,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAK,gBAAL;AAAuB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,eAAO,EACH,GAAGD,KADA;AAEHJ,UAAAA,MAAM,EAAE,sBAFL;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAAP;AAKH;;AACD,SAAK,iBAAL;AAAwB;AACpB,YAAIQ,QAAQ,GAAG,EAAf;AACAJ,QAAAA,MAAM,CAACK,IAAP,CAAYC,OAAZ,CAAoBC,KAAK,IAAI;AAEzB,cAAIC,UAAU,GAAG,EAAjB;;AACA,cAAIJ,QAAQ,CAACG,KAAK,CAACE,MAAP,CAAZ,EAA4B;AACxBD,YAAAA,UAAU,GAAGJ,QAAQ,CAACG,KAAK,CAACE,MAAP,CAArB;AACH;;AACDD,UAAAA,UAAU,CAACE,IAAX,CAAgBH,KAAhB;AACAH,UAAAA,QAAQ,GAAG,EAAE,GAAGA,QAAL;AAAe,aAACG,KAAK,CAACE,MAAP,GAAgBD;AAA/B,WAAX;AACH,SARD;AAUA,eAAO,EACH,GAAGT,KADA;AAEHJ,UAAAA,MAAM,EAAE,mBAFL;AAGHC,UAAAA,SAAS,EAAE,KAHR;AAIHC,UAAAA,MAAM,EAAEO;AAJL,SAAP;AAMH;;AACD,SAAK,uBAAL;AAA8B;AAC1BF,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,eAAO,EACH,GAAGD,KADA;AAEHJ,UAAAA,MAAM,EAAE,kCAFL;AAGHC,UAAAA,SAAS,EAAE,KAHR;AAIHC,UAAAA,MAAM,EAAE;AAJL,SAAP;AAMH;;AAID;AACI,aAAOE,KAAP;AA1CR;AA4CH","sourcesContent":["const intitialState = {\n    status: 'idle',\n    isLoading: false,\n    events: null,\n\n\n};\n\nexport default function eventReducer(state = intitialState, action) {\n    switch (action.type) {\n        //singup or login success\n        case \"REQUEST_EVENTS\": {\n            console.log(action)\n            return {\n                ...state,\n                status: 'requesting events...',\n                isLoading: true,\n            }\n        }\n        case \"RETRIEVE_EVENTS\": {\n            let bookings = {}\n            action.data.forEach(event => {\n\n                let eventArray = []\n                if (bookings[event.parkId]) {\n                    eventArray = bookings[event.parkId]\n                }\n                eventArray.push(event)\n                bookings = { ...bookings, [event.parkId]: eventArray }\n            })\n\n            return {\n                ...state,\n                status: 'retrieved events.',\n                isLoading: false,\n                events: bookings\n            }\n        }\n        case \"RETRIEVE_EVENTS_ERROR\": {\n            console.log(action)\n            return {\n                ...state,\n                status: 'Error occured retrieving events.',\n                isLoading: false,\n                events: null\n            }\n        }\n\n\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}