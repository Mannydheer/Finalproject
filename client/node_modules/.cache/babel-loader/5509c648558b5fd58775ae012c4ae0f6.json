{"ast":null,"code":"var _jsxFileName = \"/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js\";\nimport React, { useState, useEffect } from 'react'; //scripts to deploy google maps. \n\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport { requestParks, retrieveParks, retrieveParksError, requestHosts, retrieveHosts, retrieveHostsError } from '../actions/parkActions';\nimport { useDispatch, useSelector } from 'react-redux'; //components\n\nimport ParkSidebar from '../ParkSidebar';\nimport styled from 'styled-components';\n\nconst Map = ({\n  coordinates\n}) => {\n  //pass down coordinates as props.\n  const dispatch = useDispatch();\n  const allParks = useSelector(state => state.parkReducer);\n  const hostsInfo = useSelector(state => state.hostReducer);\n  const [parkInfo, setParkInfo] = useState(null); //bool to control pakr clicking. \n\n  const [parkMenu, setParkMenu] = useState(false);\n  const [hostedParks, setHostedParks] = useState(null);\n  console.log(hostedParks, 'THIS IS HOSTED PARKS');\n\n  const handleParks = () => {\n    const handleNearestPlacesAndHosts = async () => {\n      dispatch(requestParks());\n      let response = await fetch('/nearbySearch', {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(coordinates)\n      });\n      let nearbyParks = await response.json();\n\n      if (response.status === 200) {\n        dispatch(retrieveParks(nearbyParks.results));\n      } else {\n        dispatch(retrieveParksError());\n      } //HOSTS - BETTER WAY TO DO THIS.\n\n\n      dispatch(requestHosts());\n      let hostResponse = await fetch('/getParksWithHosts', {\n        method: \"GET\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        }\n      });\n      let allHosts = await hostResponse.json();\n\n      if (hostResponse.status === 200) {\n        dispatch(retrieveHosts(allHosts));\n      } else {\n        dispatch(retrieveHostsError());\n      } //double check promise all.\n      // Promise.all([allHosts, nearbyParks])\n      //     .then(() => {\n      //         console.log(hosts, allParks, 'inside Promiseall')\n      //         //check if there any hosts in any of the nearby parks.\n      //     })\n      //     .catch((err) => {\n      //         console.log(err)\n      //     })\n\n    };\n\n    handleNearestPlacesAndHosts();\n  }; //get hosted parks.\n\n\n  useEffect(() => {\n    if (hostsInfo.hosts !== null) {\n      let matchedParks = [];\n      Object.values(hostsInfo.hosts).forEach(element => {\n        allParks.parks.forEach(park => {\n          if (park.id === element.parkId) {\n            matchedParks.push(park);\n          } else return;\n        });\n      });\n      setHostedParks(matchedParks);\n    }\n  }, [hostsInfo, allParks]); //control slide in modal for when selecting a park.\n\n  const handleParkSelect = park => {\n    setParkInfo(park);\n    setParkMenu(!parkMenu);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ParkButton, {\n    onClick: handleParks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"FIND PARKS\"), /*#__PURE__*/React.createElement(Sidebar, {\n    style: parkMenu ? {\n      transform: \"translateX(0px)\"\n    } : {\n      transform: \"translateX(-400px)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, parkMenu && /*#__PURE__*/React.createElement(ParkSidebar, {\n    parkInfo: parkInfo,\n    parkMenu: parkMenu,\n    setParkMenu: setParkMenu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 30\n    }\n  })), /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 15,\n    center: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n    return /*#__PURE__*/React.createElement(Marker, {\n      position: park.geometry.location,\n      onClick: () => handleParkSelect(park),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    });\n  }), hostsInfo.hosts !== null && hostedParks !== null && hostedParks.map(park => {\n    return /*#__PURE__*/React.createElement(Marker, {\n      icon: {\n        url: '/person.png'\n      },\n      position: park.geometry.location,\n      onClick: () => handleParkSelect(park),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: coordinates,\n    icon: {\n      url: '/home.png'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  })));\n}; //must wrap.\n\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;\nconst Sidebar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\n\n   position: fixed; \n   margin-top: 30px;\n    left: 0; \n    width:400px;\n    height: 70vh; \n    transition-duration: .7s;\n    top: 27.5vh; \n\n    background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n    \n    `;\nconst ParkButton = styled.button`\n    position: absolute;\n    top: 27vh;\n    right: 47vw;\n    border-radius: 25px;\n    padding: 5px;\n    font-size:1.2rem;\n    outline: none;\n    transition: ease all 1s;\n\n\n    &:hover {\n        cursor: pointer;\n        background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n       \n\n    }\n\n    `;","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js"],"names":["React","useState","useEffect","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","requestParks","retrieveParks","retrieveParksError","requestHosts","retrieveHosts","retrieveHostsError","useDispatch","useSelector","ParkSidebar","styled","Map","coordinates","dispatch","allParks","state","parkReducer","hostsInfo","hostReducer","parkInfo","setParkInfo","parkMenu","setParkMenu","hostedParks","setHostedParks","console","log","handleParks","handleNearestPlacesAndHosts","response","fetch","method","headers","body","JSON","stringify","nearbyParks","json","status","results","hostResponse","allHosts","hosts","matchedParks","Object","values","forEach","element","parks","park","id","parkId","push","handleParkSelect","transform","lat","lng","map","geometry","location","url","WrappedMap","Sidebar","div","ParkButton","button"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n//scripts to deploy google maps. \nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport {\n    requestParks, retrieveParks, retrieveParksError,\n    requestHosts, retrieveHosts, retrieveHostsError\n} from '../actions/parkActions';\n\nimport { useDispatch, useSelector } from 'react-redux';\n//components\nimport ParkSidebar from '../ParkSidebar';\n\n\nimport styled from 'styled-components';\n\n\n\nconst Map = ({ coordinates }) => {\n    //pass down coordinates as props.\n\n    const dispatch = useDispatch();\n    const allParks = useSelector(state => state.parkReducer)\n    const hostsInfo = useSelector(state => state.hostReducer)\n    const [parkInfo, setParkInfo] = useState(null)\n    //bool to control pakr clicking. \n    const [parkMenu, setParkMenu] = useState(false);\n\n    const [hostedParks, setHostedParks] = useState(null)\n\n\n\n\n\n\n    console.log(hostedParks, 'THIS IS HOSTED PARKS')\n\n\n\n\n\n    const handleParks = () => {\n        const handleNearestPlacesAndHosts = async () => {\n            dispatch(requestParks())\n\n\n            let response = await fetch('/nearbySearch', {\n                method: \"POST\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-type': 'application/json'\n                },\n                body: JSON.stringify(coordinates)\n            })\n            let nearbyParks = await response.json();\n            if (response.status === 200) {\n                dispatch(retrieveParks(nearbyParks.results))\n            }\n            else {\n                dispatch(retrieveParksError())\n            }\n\n            //HOSTS - BETTER WAY TO DO THIS.\n            dispatch(requestHosts())\n\n\n            let hostResponse = await fetch('/getParksWithHosts', {\n                method: \"GET\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-type': 'application/json'\n                },\n            })\n            let allHosts = await hostResponse.json();\n            if (hostResponse.status === 200) {\n                dispatch(retrieveHosts(allHosts))\n\n            } else {\n                dispatch(retrieveHostsError())\n\n            }\n            //double check promise all.\n            // Promise.all([allHosts, nearbyParks])\n            //     .then(() => {\n\n            //         console.log(hosts, allParks, 'inside Promiseall')\n            //         //check if there any hosts in any of the nearby parks.\n\n            //     })\n            //     .catch((err) => {\n            //         console.log(err)\n            //     })\n\n        }\n        handleNearestPlacesAndHosts();\n    }\n\n    //get hosted parks.\n\n    useEffect(() => {\n        if (hostsInfo.hosts !== null) {\n\n            let matchedParks = [];\n\n\n            Object.values(hostsInfo.hosts).forEach(element => {\n\n                allParks.parks.forEach(park => {\n                    if (park.id === element.parkId) {\n                        matchedParks.push(park)\n                    }\n                    else return;\n\n                });\n\n            });\n            setHostedParks(matchedParks)\n        }\n\n    }, [hostsInfo, allParks])\n\n\n    //control slide in modal for when selecting a park.\n    const handleParkSelect = (park) => {\n        setParkInfo(park)\n        setParkMenu(!parkMenu)\n    }\n\n    return (\n        <>\n            <ParkButton onClick={handleParks}>FIND PARKS</ParkButton>\n            <Sidebar style={(parkMenu) ? { transform: \"translateX(0px)\" } : {\n                transform: \"translateX(-400px)\"\n            }}>\n                {/* park info needs to be loaded.  */}\n                {parkMenu && <ParkSidebar parkInfo={parkInfo} parkMenu={parkMenu} setParkMenu={setParkMenu}></ParkSidebar>}\n            </Sidebar>\n            <GoogleMap defaultZoom={15}\n                center={{ lat: coordinates.lat, lng: coordinates.lng }}>\n\n                {/* RENDER ALL PARKS NEARBY */}\n                {allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n                    return (\n                        <Marker position={park.geometry.location}\n                            onClick={() => handleParkSelect(park)}>\n\n                        </Marker>\n                    )\n                })}\n                {/* RENDER ALL HOSTED PARKS. */}\n                {hostsInfo.hosts !== null && hostedParks !== null && hostedParks.map(park => {\n                    return (\n                        <Marker\n                            icon={{ url: '/person.png' }}\n                            position={park.geometry.location}\n                            onClick={() => handleParkSelect(park)} />\n                    )\n                })}\n\n                {/* CURRENT POSITION - HOME. */}\n                <Marker position={coordinates}\n                    icon={{ url: '/home.png' }}\n\n                ></Marker>\n\n                {/* TIPPY/INFO ON CLICK OF A MARKER.  */}\n                {/* {parkInfo !== null &&\n                    //control the tippy for each map point.\n                    <InfoWindow\n                        position={{\n                            lat: parkInfo.geometry.location.lat,\n                            lng: parkInfo.geometry.location.lng\n                        }}\n                        onCloseClick={() => setParkInfo(null)}>\n                        <div>\n                            <div>park details</div>\n                            <div>{parkInfo.name}</div>\n                        </div>\n                    </InfoWindow>} */}\n            </GoogleMap>\n        </>\n\n    )\n\n}\n//must wrap.\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\n\nexport default WrappedMap;\n\nconst Sidebar = styled.div`\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\n\n   position: fixed; \n   margin-top: 30px;\n    left: 0; \n    width:400px;\n    height: 70vh; \n    transition-duration: .7s;\n    top: 27.5vh; \n\n    background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n    \n    `\n\nconst ParkButton = styled.button`\n    position: absolute;\n    top: 27vh;\n    right: 47vw;\n    border-radius: 25px;\n    padding: 5px;\n    font-size:1.2rem;\n    outline: none;\n    transition: ease all 1s;\n\n\n    &:hover {\n        cursor: pointer;\n        background-image: linear-gradient(-60deg, #16a085 0%, #f4d03f 100%);\n       \n\n    }\n\n    `"]},"metadata":{},"sourceType":"module"}