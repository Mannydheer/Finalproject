{"ast":null,"code":"var _jsxFileName = \"/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js\";\nimport React, { useState, useEffect } from 'react'; //scripts to deploy google maps. \n\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from 'react-google-maps';\nimport { requestParks, retrieveParks, retrieveParksError } from '../actions/parkActions';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Map = ({\n  coordinates\n}) => {\n  //pass down coordinates as props.\n  const dispatch = useDispatch();\n  const allParks = useSelector(state => state.parkReducer);\n  const [parkInfo, setParkInfo] = useState(null);\n\n  const handleParks = () => {\n    const handleNearestPlaces = async () => {\n      dispatch(requestParks());\n\n      try {\n        let response = await fetch('/nearbySearch', {\n          method: \"POST\",\n          headers: {\n            'Accept': 'application/json',\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify(coordinates)\n        });\n        let nearbyParks = await response.json();\n\n        if (response.status === 200) {\n          dispatch(retrieveParks(nearbyParks.results));\n        } else {\n          dispatch(retrieveParksError());\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    handleNearestPlaces();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 15,\n    center: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n    console.log(park.geometry.location);\n    return /*#__PURE__*/React.createElement(Marker, {\n      position: park.geometry.location,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: coordinates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleParks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"FIND PARKS\"));\n}; //must wrap.\n\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;","map":{"version":3,"sources":["/Users/maniderdheer/Documents/GitHub/finalproject/client/src/components/Map/Map.js"],"names":["React","useState","useEffect","GoogleMap","withScriptjs","withGoogleMap","Marker","requestParks","retrieveParks","retrieveParksError","useDispatch","useSelector","Map","coordinates","dispatch","allParks","state","parkReducer","parkInfo","setParkInfo","handleParks","handleNearestPlaces","response","fetch","method","headers","body","JSON","stringify","nearbyParks","json","status","results","err","console","log","lat","lng","parks","map","park","geometry","location","WrappedMap"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,aAAlC,EAAiDC,MAAjD,QAA+D,mBAA/D;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,kBAAtC,QAAgE,wBAAhE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAKA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAC7B;AAEA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAMK,QAAQ,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAA5B;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;;AASA,QAAMmB,WAAW,GAAG,MAAM;AACtB,UAAMC,mBAAmB,GAAG,YAAY;AACpCP,MAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;;AAEA,UAAI;AACA,YAAIe,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,EAAkB;AACxCC,UAAAA,MAAM,EAAE,MADgC;AAExCC,UAAAA,OAAO,EAAE;AACL,sBAAU,kBADL;AAEL,4BAAgB;AAFX,WAF+B;AAMxCC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,WAAf;AANkC,SAAlB,CAA1B;AAQA,YAAIgB,WAAW,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAxB;;AACA,YAAIR,QAAQ,CAACS,MAAT,KAAoB,GAAxB,EAA6B;AACzBjB,UAAAA,QAAQ,CAACN,aAAa,CAACqB,WAAW,CAACG,OAAb,CAAd,CAAR;AACH,SAFD,MAGK;AACDlB,UAAAA,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;AACH;AACJ,OAhBD,CAiBA,OAAOwB,GAAP,EAAY;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,KAvBD;;AAyBAZ,IAAAA,mBAAmB;AACtB,GA3BD;;AAyCA,sBACI,uDACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAE,EAAxB;AACI,IAAA,MAAM,EAAE;AAAEe,MAAAA,GAAG,EAAEvB,WAAW,CAACuB,GAAnB;AAAwBC,MAAAA,GAAG,EAAExB,WAAW,CAACwB;AAAzC,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKtB,QAAQ,CAACgB,MAAT,KAAoB,kBAApB,IAA0ChB,QAAQ,CAACuB,KAAT,CAAeC,GAAf,CAAmBC,IAAI,IAAI;AAClEN,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAI,CAACC,QAAL,CAAcC,QAA1B;AACA,wBACI,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEF,IAAI,CAACC,QAAL,CAAcC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GAL0C,CAF/C,eAQI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE7B,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CADJ,eAWI;AAAQ,IAAA,OAAO,EAAEO,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,CADJ;AAiBH,CA1ED,C,CA2EA;;;AACA,MAAMuB,UAAU,GAAGvC,YAAY,CAACC,aAAa,CAACO,GAAD,CAAd,CAA/B;AAGA,eAAe+B,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n//scripts to deploy google maps. \nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from 'react-google-maps';\nimport { requestParks, retrieveParks, retrieveParksError } from '../actions/parkActions';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\n\n\nconst Map = ({ coordinates }) => {\n    //pass down coordinates as props.\n\n    const dispatch = useDispatch();\n\n    const allParks = useSelector(state => state.parkReducer)\n\n    const [parkInfo, setParkInfo] = useState(null)\n\n\n\n\n\n\n\n\n    const handleParks = () => {\n        const handleNearestPlaces = async () => {\n            dispatch(requestParks())\n\n            try {\n                let response = await fetch('/nearbySearch', {\n                    method: \"POST\",\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-type': 'application/json'\n                    },\n                    body: JSON.stringify(coordinates)\n                })\n                let nearbyParks = await response.json();\n                if (response.status === 200) {\n                    dispatch(retrieveParks(nearbyParks.results))\n                }\n                else {\n                    dispatch(retrieveParksError())\n                }\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n\n        handleNearestPlaces();\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return (\n        <>\n            <GoogleMap defaultZoom={15}\n                center={{ lat: coordinates.lat, lng: coordinates.lng }}>\n                {allParks.status === 'retrieved parks.' && allParks.parks.map(park => {\n                    console.log(park.geometry.location)\n                    return (\n                        <Marker position={park.geometry.location}></Marker>\n                    )\n                })}\n                <Marker position={coordinates}></Marker>\n            </GoogleMap>\n            <button onClick={handleParks}>FIND PARKS</button>\n        </>\n\n    )\n\n}\n//must wrap.\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\n\n\nexport default WrappedMap;"]},"metadata":{},"sourceType":"module"}